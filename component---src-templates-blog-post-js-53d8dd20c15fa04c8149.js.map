{"version":3,"sources":["webpack:///./node_modules/date-fns/esm/startOfDay/index.js","webpack:///./node_modules/date-fns/esm/differenceInCalendarDays/index.js","webpack:///./node_modules/date-fns/esm/compareAsc/index.js","webpack:///./node_modules/date-fns/esm/differenceInDays/index.js","webpack:///./node_modules/date-fns/esm/fp/differenceInWeeks/index.js","webpack:///./node_modules/date-fns/esm/differenceInWeeks/index.js","webpack:///./src/templates/blog-post.js"],"names":["startOfDay","dirtyDate","dirtyOptions","arguments","length","TypeError","date","Object","toDate","setHours","MILLISECONDS_IN_DAY","compareAsc","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","diff","getTime","differenceInDays","sign","difference","Math","abs","startOfDayLeft","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","round","differenceInCalendarDays","setDate","getDate","result","fp_differenceInWeeks","convertToFP","floor","ceil","__webpack_require__","d","__webpack_exports__","query","formatDate","format","buildSchemaOrg","_ref","title","createdAt","updatedAt","tags","_ref2","author","@context","@type","dateModified","datePublished","headline","keywords","join","BlogPost","_ref3","slug","pageContext","_ref3$data","data","_ref3$data$post","post","content","postUrl","site","meta","siteUrl","react_default","a","createElement","Fragment","components","isBlogPost","schemaOrgItems","differenceInWeeks","blog","html","childContentfulRichText","dist","mt","lib","href","colorScheme","showFaces","share"],"mappings":"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","file":"component---src-templates-blog-post-js-53d8dd20c15fa04c8149.js","sourcesContent":["import toDate from '../toDate/index.js'\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|String|Number} date - the original date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport default function startOfDay (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions)\n  date.setHours(0, 0, 0, 0)\n  return date\n}\n","import getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport startOfDay from '../startOfDay/index.js'\n\nvar MILLISECONDS_IN_DAY = 86400000\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 2, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport default function differenceInCalendarDays (dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var startOfDayLeft = startOfDay(dirtyDateLeft, dirtyOptions)\n  var startOfDayRight = startOfDay(dirtyDateRight, dirtyOptions)\n\n  var timestampLeft = startOfDayLeft.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfDayLeft)\n  var timestampRight = startOfDayRight.getTime() -\n    getTimezoneOffsetInMilliseconds(startOfDayRight)\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY)\n}\n","import toDate from '../toDate/index.js'\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|String|Number} dateLeft - the first date to compare\n * @param {Date|String|Number} dateRight - the second date to compare\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport default function compareAsc(\n  dirtyDateLeft,\n  dirtyDateRight,\n  dirtyOptions\n) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var dateLeft = toDate(dirtyDateLeft, dirtyOptions)\n  var dateRight = toDate(dirtyDateRight, dirtyOptions)\n\n  var diff = dateLeft.getTime() - dateRight.getTime()\n\n  if (diff < 0) {\n    return -1\n  } else if (diff > 0) {\n    return 1\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff\n  }\n}\n","import toDate from '../toDate/index.js'\nimport differenceInCalendarDays from '../differenceInCalendarDays/index.js'\nimport compareAsc from '../compareAsc/index.js'\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between the given dates.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of full days\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 2, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n*/\nexport default function differenceInDays (dirtyDateLeft, dirtyDateRight, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var dateLeft = toDate(dirtyDateLeft, dirtyOptions)\n  var dateRight = toDate(dirtyDateRight, dirtyOptions)\n\n  var sign = compareAsc(dateLeft, dateRight, dirtyOptions)\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight, dirtyOptions))\n\n  dateLeft.setDate(dateLeft.getDate() - sign * difference)\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  var isLastDayNotFull = compareAsc(dateLeft, dateRight, dirtyOptions) === -sign\n  var result = sign * (difference - isLastDayNotFull)\n  // Prevent negative zero\n  return result === 0 ? 0 : result\n}\n","// This file is generated automatically by `scripts/build/fp.js`. Please, don't change it.\n\nimport fn from '../../differenceInWeeks/index.js'\nimport convertToFP from '../_lib/convertToFP/index.js'\n\nvar differenceInWeeks = convertToFP(fn, 2)\n\nexport default differenceInWeeks\n","import differenceInDays from '../differenceInDays/index.js'\n\n/**\n * @name differenceInWeeks\n * @category Week Helpers\n * @summary Get the number of full weeks between the given dates.\n *\n * @description\n * Get the number of full weeks between the given dates.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|String|Number} dateLeft - the later date\n * @param {Date|String|Number} dateRight - the earlier date\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Number} the number of full weeks\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // How many full weeks are between 5 July 2014 and 20 July 2014?\n * var result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))\n * //=> 2\n */\nexport default function differenceInWeeks(\n  dirtyDateLeft,\n  dirtyDateRight,\n  dirtyOptions\n) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var diff = differenceInDays(dirtyDateLeft, dirtyDateRight, dirtyOptions) / 7\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff)\n}\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { differenceInWeeks, format } from 'date-fns/fp'\nimport { Box } from '@rebass/grid'\nimport { Like } from 'react-facebook'\n\nimport { BlogTags, BlogPostContent } from '../components/blog'\nimport { SEO } from '../components'\n\nlet formatDate = format('MMMM dd, yyyy')\n\nlet buildSchemaOrg = ({ title, createdAt, updatedAt, tags }) => ({\n  author,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'BlogPosting',\n    dateModified: updatedAt,\n    datePublished: createdAt,\n    headline: title,\n    keywords: tags.join(', '),\n    author,\n  },\n]\n\nlet BlogPost = ({\n  pageContext: { slug },\n  data: {\n    post: { title, createdAt, updatedAt, tags, content },\n    site,\n  },\n}) => {\n  let postUrl = `${site.meta.siteUrl}/blog/${slug}/`\n\n  return (\n    <>\n      <SEO\n        title={title}\n        isBlogPost\n        schemaOrgItems={buildSchemaOrg({ title, createdAt, updatedAt, tags })}\n      />\n\n      <h1>{title}</h1>\n\n      <small>{formatDate(createdAt)}</small>\n\n      {differenceInWeeks(createdAt, updatedAt) > 1 && (\n        <small> (Last update at {formatDate(updatedAt)})</small>\n      )}\n\n      <BlogTags tags={tags} />\n\n      <BlogPostContent\n        post={{ title, postUrl, html: content.childContentfulRichText.html }}\n      />\n\n      <Box mt={20}>\n        <Like href={postUrl} colorScheme=\"dark\" showFaces share />\n      </Box>\n    </>\n  )\n}\n\nexport default BlogPost\n\nexport const query = graphql`\n  query($slug: String!) {\n    post: contentfulBlog(slug: { eq: $slug }) {\n      title\n      createdAt\n      updatedAt\n      tags\n      content {\n        childContentfulRichText {\n          html\n        }\n      }\n    }\n\n    site {\n      meta: siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n"],"sourceRoot":""}