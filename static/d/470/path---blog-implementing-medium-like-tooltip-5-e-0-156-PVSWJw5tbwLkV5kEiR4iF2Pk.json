{"data":{"post":{"title":"Implementing medium like tooltip","createdAt":"2019-01-20T12:28:59.801Z","updatedAt":"2019-01-23T09:34:52.519Z","tags":["reactjs","render-props","web-api"],"content":{"childContentfulRichText":{"html":"<p>It might (and should) look like quite a trivial thing to implement. But still there are some pitfalls, so I want to tell how to avoid them, what libraries and patterns can help. And again to strengthen my English üòÅ</p><h2>Positioning is not easy</h2><p>Here is a list of problems commonly faced when dealing with popups:</p><ul><li><p>how to position element relative to some other one</p></li><li><p>how to position element over everything else aka <i>z-index: 999;</i></p></li><li><p>take into account viewport borders</p></li><li><p>handle scrolling</p></li></ul><p>Fortunately we live in open source era, so there is plenty of ready solutions. E.g. <a href=\"https://github.com/FezVrasta/react-popper\" target=\"_blank\" rel=\"noopener noreferrer\">react-popper</a> - library that takes care about all positioning issues. I&#39;ve already used it in my previous projects and was satisfied. So I&#39;ll use it here as well.</p><p>Let&#39;s try to create simple popup using it:</p><p>\n  <iframe\n    data-src=\"https://codesandbox.io/embed/2m4r4r96j?autoresize=1&hidenavigation=1&view=preview\"\n    style=\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\"\n    sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\">\n  </iframe></p><p>By the way, its api should be more neat <a href=\"https://github.com/FezVrasta/react-popper/issues/241\" target=\"_blank\" rel=\"noopener noreferrer\">with hooks</a>.</p><p>As you can see, <i>react-popper</i> solved all problems I&#39;ve mentioned above:</p><ul><li><p>calculated position of popup relative to input</p></li><li><p>positioned it using <i>translate3d </i>(you can also use position fixed or even <a href=\"https://reactjs.org/docs/portals.html\" target=\"_blank\" rel=\"noopener noreferrer\">portals</a> in case you are using overflow...)</p></li><li><p>took into account viewport and handles scrolling</p></li></ul><h2>Let&#39;s make it bit more complex</h2><p>To tell the truth, it is not the end of our positioning journey: the tooltip should appear next to the selected text, not its DOM node (cause it might be huge paragraph).</p><p>Any ideas how we can accomplish that? A couple of questions to google and boom - browser has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\" target=\"_blank\" rel=\"noopener noreferrer\">selection api</a>. With its help we can get access to parts of text nodes - <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Range\" target=\"_blank\" rel=\"noopener noreferrer\">Ranges</a>.</p><p>Let&#39;s look at how we can apply this api:</p><p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">handleMouseUp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> selection <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// we do not need \"empty\" selection</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selection<span class=\"token punctuation\">.</span>isCollapsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> range <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span><span class=\"token function\">getRangeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// now we know where to render tooltip</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></p><p>Here is a demo:</p><p>\n  <iframe\n    data-src=\"https://codesandbox.io/embed/w7p05znp48?hidenavigation=1&view=preview\"\n    style=\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\"\n    sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\">\n  </iframe></p><p>Well looks cool, but how can we attach that to <i>react-popper</i>? It expects to get a ref to DOM node...</p><p>Its documentation has an answer - <a href=\"https://github.com/FezVrasta/react-popper#usage-without-a-reference-htmlelement\" target=\"_blank\" rel=\"noopener noreferrer\">we should create &quot;virtual&quot; DOM node</a>:</p><p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// we are implementing methods required for react-popper</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">VirtualSelectionReference</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selection <span class=\"token operator\">=</span> selection\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">getRangeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">clientWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">clientHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></p><p>It&#39;s time to bring everything together:</p><p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">SelectionReference</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onSelect<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Reference<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token comment\">// 1. more handy api</span>\n      <span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">getProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onMouseUp<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span>\n        onMouseUp<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">let</span> selection <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>selection<span class=\"token punctuation\">.</span>isCollapsed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 2. feed it to react-popper</span>\n            <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VirtualSelectionReference</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 3. handy method</span>\n            onSelect <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n\n          <span class=\"token comment\">// 1. user of our component might want to use this event too</span>\n          onMouseUp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onMouseUp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Reference<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></p><p>Let&#39;s review the solution step by step:</p><ol><li><p>We&#39;ve created special  <i>SelectionReference</i> component by wrapping original one.\nIt has same signature with one exception: children function (aka <a href=\"https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce\" target=\"_blank\" rel=\"noopener noreferrer\">render prop</a>) will receive function instead of object - it is known as <a href=\"https://blog.kentcdodds.com/how-to-give-rendering-control-to-users-with-prop-getters-549eaef76acf\" target=\"_blank\" rel=\"noopener noreferrer\">get props pattern</a>. The main benefit of it here is that our component taking care of merging its own props (<i>onMouseUp</i> handler) with props we might want to provide when outside.</p></li><li><p>We&#39;ve fed our &quot;fake&quot; DOM node to original <i>Reference </i>component<i>.</i></p></li><li><p>We&#39;ve created handy <i>onSelect</i> event, which we&#39;ll use later.</p></li></ol><p>That&#39;s it! now we can use our component to position tooltip:</p><p>\n  <iframe\n    data-src=\"https://codesandbox.io/embed/koypnm63kr?autoresize=1&hidenavigation=1&view=preview\"\n    style=\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\"\n    sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\">\n  </iframe></p><h2>Cherry on top</h2><p>This guide would be incomplete if we won&#39;t animate appearance of tooltip. And again I will use proven solution - <a href=\"https://github.com/react-spring/react-spring\" target=\"_blank\" rel=\"noopener noreferrer\">react-spring</a>.</p><p>All we need is to wrap our tooltip into <i>Transition</i> (it animates component lifecycles). So we&#39;ll get composition of 2 <i>render prop</i> components:</p><p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// our component should be totally reusable so</span>\n<span class=\"token comment\">// 1. we manage its state (isOpen) outside</span>\n<span class=\"token comment\">// 2. we receive content (children) from outside as well</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Tooltip</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> isOpen<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Popper<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token comment\">/* Popper provides styles for positioning */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> style <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Transition\n        items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>isOpen<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">from</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translateY(30px) scale(0.9)`</span></span><span class=\"token punctuation\">,</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        enter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translateY(0) scale(1)`</span></span><span class=\"token punctuation\">,</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        leave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> transform<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`translateY(30px) scale(0.9)`</span></span><span class=\"token punctuation\">,</span> opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token comment\">/* we should use flag provided by Transition to make animation work */</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span>transitionIsOpen <span class=\"token operator\">=></span>\n          transitionIsOpen <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token punctuation\">(</span>transitionStyle <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token comment\">// and here is styles provided by react-spring to animate appearance</span>\n            <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>SomeStyledTooltip style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>transitionStyle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SomeStyledTooltip<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Transition<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Popper<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></p><p>It is a bit simplified code, full version of it you can find <a href=\"https://github.com/kitos/kitos.github.io/blob/develop/src/components/tooltip/tooltip.js\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>. And, by the way, you can see the demo by selecting any text in this (any any other) blog post üòè.</p><p>That is all I wanted to share for now. I hope you found this article useful.</p>"}}},"site":{"meta":{"siteUrl":"https://www.nikitakirsanov.com"}}},"pageContext":{"slug":"implementing-medium-like-tooltip"}}