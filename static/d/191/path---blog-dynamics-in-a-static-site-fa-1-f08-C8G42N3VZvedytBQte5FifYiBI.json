{"data":{"post":{"title":"Dynamics in a static site","createdAt":"2019-01-28T11:41:01.966Z","updatedAt":"2019-01-28T11:49:07.394Z","tags":["cloud-functions","gcp","github-api","reach-ui","reactjs","CORS","JAMStack"],"content":{"childContentfulRichText":{"html":"<h2>Decompose it!</h2><p>To tell the truth, <a href=\"https://www.nikitakirsanov.com/blog/implementing-medium-like-tooltip/\" target=\"_blank\" rel=\"noopener noreferrer\"></a><a href=\"https://www.nikitakirsanov.com/blog/implementing-medium-like-tooltip/\" target=\"_blank\" rel=\"noopener noreferrer\">medium like tooltip</a> was implemented not to allow you to quote me in twitter (I can hardly believe somebody would ever do that). But to provide functionality for reporting typos/mistakes (at least it is useful for me).</p><p>&quot;Why did you even created<i> tweet feature</i> thought it wasn&#39;t you original goal?&quot; you might ask.</p><p>Well it&#39;s because of my pattion to introduce everything very gradually. E.g. I prefer creating several small commits to single bigger one. And I encourage you to do the same, cause it&#39;ll make it much easier:</p><ul><li><p>for others to review your code</p></li><li><p>to explore git history eventually</p></li></ul><p>But small commits doesn&#39;t mean you won&#39;t get any benefits until the last commit. And they shouldn&#39;t break anything, leaving you codebase in some intermediate state. Quite the opposite, every single commit should make you app/lib/whatever better: extend api (new feature), fix and issue, etc.</p><p>The same thing with features you implement. Try to decompose them as much as possible: the smaller increment you produce, the faster you deliver it, the faster you get feedback, the better quality of product you build.</p><h2>Let&#39;s get down to business</h2><p>So what I mean by &quot;functionality for reporting typos/mistakes&quot;: I want to add an action to tooltip developed in <a href=\"https://www.nikitakirsanov.com/blog/implementing-medium-like-tooltip/\" target=\"_blank\" rel=\"noopener noreferrer\">previous article</a>, that will open dialog with form for submitting mistake.</p><ol><li><p>The easiest part would be to just append button to tooltip. That is how it&#39;ll look:\n</p><img src=\"//images.ctfassets.net/6dybdba3jdxv/3p2iUwaftzIvxgkQrewaMm/c1c3eda9c240c1c4be884c231400bc1d/typo-action.jpg\" alt=\"Add new action to tooltip\" style=\"display: block; max-width: 450px; margin: 0 auto\" /><p></p></li><li><p>Now we should implement dialog. There is plenty of ready solutions for dialogs (like <a href=\"https://github.com/reactjs/react-modal\" target=\"_blank\" rel=\"noopener noreferrer\">react-modal</a>, also lots of UI libraries offer them), but I would like to give a try to the one from <a href=\"https://ui.reach.tech/\" target=\"_blank\" rel=\"noopener noreferrer\">reach-ui</a> developed by <a href=\"https://twitter.com/ryanflorence\" target=\"_blank\" rel=\"noopener noreferrer\">Ryan Florence</a>.\nIts api is pretty straightforward, so I won&#39;t show an example with it (you can easily find <a href=\"https://ui.reach.tech/dialog\" target=\"_blank\" rel=\"noopener noreferrer\">it on its site</a>). But I&#39;d like to mentioned that to animate it I used <a href=\"http://react-spring.surge.sh\" target=\"_blank\" rel=\"noopener noreferrer\">react-spring</a>, as I did for tooltip (and you can also find <a href=\"https://ui.reach.tech/dialog#animation-example\" target=\"_blank\" rel=\"noopener noreferrer\">an example of using them together</a>). Here is <a href=\"https://github.com/kitos/kitos.github.io/blob/develop/src/components/dialog.js\" target=\"_blank\" rel=\"noopener noreferrer\">source code</a> of my dialog and result:\n</p><img src=\"//images.ctfassets.net/6dybdba3jdxv/kIffpltUXt1cKf2TOmnRa/779283258cffc6b09cfe8d33bbc0d8e7/typo-dialog.jpg\" alt=\"Dialog to report a typo\" style=\"display: block; max-width: 450px; margin: 0 auto\" /><p></p></li><li><p>The last but not least thing we should implement is backend which will receive out submissions and put it somewhere .</p></li></ol><h2><u>A</u> in JAMStack stands for...</h2><p>Wait... How static site should deal with dynamic data? Is it even possible?</p><p>Sure! Nothing stops me from using some database and <b>A</b>PI (service) to communicate with it, but:</p><ul><li><p>I don&#39;t want to complicate infrastructure of my site\nCurrently I am using only github pages</p></li><li><p>I don&#39;t want to pay for infrastructure\nMoreover it mostly won&#39;t be used</p></li><li><p>I don&#39;t want to develop back office to manage submissions</p></li><li><p>I want to be fancy</p></li></ul><p>So I decided to use <a href=\"https://github.com/kitos/kitos.github.io/issues\" target=\"_blank\" rel=\"noopener noreferrer\">github issues</a> as a storage and <a href=\"https://cloud.google.com/functions/\" target=\"_blank\" rel=\"noopener noreferrer\">google cloud functions</a> as a service. This allows me to address all issues above:</p><ul><li><p>The only new thing I&#39;ll introduce is GCP function which is created in a couple of clicks</p></li><li><p>Unlike VMs or any other platform types, you pay only while your code runs\nAlso GCP <a href=\"https://cloud.google.com/free/\" target=\"_blank\" rel=\"noopener noreferrer\">offers 2 million calls for free</a>, and I probably won&#39;t be able to go beyond this limit</p></li><li><p>GitHub has a neat way to manage issues</p></li><li><p>😎</p></li></ul><p>Time to share some code, here is my cloud function:</p><p><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'querystring'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> github <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseURL<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://api.github.com'</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'blog-typo-issue-creator'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  auth<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    username<span class=\"token punctuation\">:</span> <span class=\"token string\">'kitos'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// always use environment variables for sensitive data</span>\n    password<span class=\"token punctuation\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GH_TOKEN</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>createIssue <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">,</span> link<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> suggestion <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>query\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> html_url <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> github<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/repos/kitos/kitos.github.io/issues'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Typo in blog post \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"`</span></span><span class=\"token punctuation\">,</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\nThere is a typo post [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">](</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>link<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">).\n### Source:\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>source<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n### Suggestion:\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>suggestion<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\t\n      `</span></span><span class=\"token punctuation\">,</span>\n      assignees<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"kitos\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      labels<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"blog:typo\"</span><span class=\"token punctuation\">]</span>\n  \t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    \n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">:</span> html_url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n</p><p>Pretty straightforward, right?</p><p>But you might wondering why I decided to use github api via cloud function instead of direct call. Well, I expect that not all my readers have github account and they wouldn&#39;t like to create one to submit a typo. Also later this functionality might become a part of something bigger (remember my passion to decomposition? 😏).</p><h2>Integration</h2><p>The last thing we should accomplish is to call our function when user submits form. It shouldn&#39;t cause any difficulties except <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"noopener noreferrer\">same origin policy</a>: gcp function domain is like <u><i>https://gcpRegion-your-app-id.cloudfunctions.net/function-name</i></u> and browser would allow to make such request.</p><p>Fortunately we have <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener noreferrer\">CORS</a> mechanism which allows us to tell browser that it can use our resource (cloud function) from a different domain (<u><i>www.nikitakirsanov.com</i></u>). And it&#39;s to implement it using GCP (<a href=\"https://cloud.google.com/functions/docs/writing/http#handling_cors_requests\" target=\"_blank\" rel=\"noopener noreferrer\">official docs</a>): you should add special response headers:</p><p>exports.createIssue = async (request, response) =&gt; {\n  ...\n  response.set(&#39;Access-Control-Allow-Origin&#39;, &quot;https://www.nikitakirsanov.com&quot;)\n  response.set(&#39;Access-Control-Allow-Methods&#39;, &#39;GET&#39;)\n  ...\n}</p><p>That&#39;s it! Here is a demo:</p><img src=\"//images.ctfassets.net/6dybdba3jdxv/5yN3jBCGFF39CxZsNyqwXu/1bc69f8778cd63f4113099e3b038bb2b/report-typo-demo.gif\" alt=\"Report typo/mistake demo\" style=\"display: block; max-width: 450px; margin: 0 auto\" /><p></p>"}}},"site":{"meta":{"siteUrl":"https://www.nikitakirsanov.com"}}},"pageContext":{"slug":"dynamics-in-a-static-site"}}